// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("DATABASE_URL_UNPOOLED") // uses a direct connection
}

// In case you ever have to move away from Clerk 
model Account {
  id          String    @id @default(cuid())
  clerkUserId String    @unique
  name        String?
  email       String?   @unique
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  business    Business?
  products    Product[]
}

model Business {
  id          String   @id @default(cuid())
  name        String   @default("")
  email       String?  @unique
  bio         String?  @default("")
  phone       String?  @default("")
  website     String?  @default("")
  location    String?  @default("")
  twitter     String?  @default("")
  linkedIn    String?  @default("")
  instagram   String?  @default("")
  account     Account? @relation(fields: [accountId], references: [id], onDelete: Restrict)
  accountId   String?  @unique
  clerkUserId String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id      String    @id @default(cuid())
  url     String
  Product Product[]
}

model Orders {
  id              String         @id @default(cuid())
  userId          String
  amount          Float
  currency        String
  status          String
  createdDate     DateTime       @default(now())
  paymentIntentID String?        @unique
  products        OrderProduct[]
}

model Product {
  id             String         @id @default(cuid())
  name           String
  price          Float
  metadata       Json
  variations     Json
  description    String
  stock          Int            @default(1) // move to metadata?
  discountAmount Float          @default(0) // move to metadata?
  clerkUserId    String?        @unique
  account        Account?       @relation(fields: [accountId], references: [id], onDelete: Restrict)
  accountId      String?        @unique
  orders         OrderProduct[]
  images         File[]
}

model OrderProduct {
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  order     Orders  @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}
